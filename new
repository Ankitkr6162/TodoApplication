SELECT 
	ecd.qid, 
	CASE 
		WHEN ecd.qid = 201 THEN 'Cervical Cancer Screening' 
		WHEN ecd.qid = 203 THEN 'HIV Screening' 
		WHEN ecd.qid = 205 THEN 'Adult BMI' 
		WHEN ecd.qid = 208 THEN 'Colorectal Cancer Screening' 
		WHEN ecd.qid = 213 THEN 'Childhood BMI' 
		WHEN ecd.qid = 218 THEN 'IVD' 
		WHEN ecd.qid = 220 THEN 'Depression Screening' 
		WHEN ecd.qid = 223 THEN 'Depression Remission' 
		WHEN ecd.qid = 225 THEN 'Diabetes' 
		WHEN ecd.qid = 228 THEN 'Hypertension' 
		WHEN ecd.qid = 230 THEN 'Statin Therapy' 
		WHEN ecd.qid = 232 THEN 'Tobacco Screening' 
		WHEN ecd.qid = 235 THEN 'Breast Cancer Screening' 
		WHEN ecd.qid = 240 THEN 'SUD Initiation' 
		WHEN ecd.qid = 242 THEN 'SUD Engagement' 
		END AS 'Measure Name', 
	p.pid AS 'Patient ID', 
	CASE 
		WHEN ecd.qid = 225 AND ecd.c3 = 0 THEN 'ACHIEVED' 
		WHEN ecd.qid = 225 AND ecd.c3 = 1 THEN 'NOT ACHIEVED' 
		WHEN ecd.qid <> 225 AND ecd.c3 = 0 THEN 'NOT ACHIEVED' 
		WHEN ecd.qid <> 225 AND ecd.c3 = 1 THEN 'ACHIEVED' 
		END AS 'Compliance Status', 
	CASE 
		WHEN ecd.qid = 225 AND ecd.c3 = 1 THEN os.EncounterID 
		WHEN ecd.qid = 225 AND ecd.c3 = 0 THEN 0 ELSE os.EncounterID 
		END AS 'Orderset ID', 
	CASE 
		WHEN ecd.qid = 225 AND ecd.c3 = 1 THEN os.Description 
		WHEN ecd.qid = 225 AND ecd.c3 = 0 THEN '' ELSE os.Description 
		END AS 'Item Name' 
FROM ebo_cde_detail ecd 
INNER JOIN patients p ON p.pid = ecd.c2 
INNER JOIN (
		SELECT c2, qid, MAX(id) AS max_id FROM ebo_cde_detail 
		WHERE qid IN (201,203,205,208,213,218,220,223,225,228,230,232,235,240,242) AND cdeid = 2 
		GROUP BY c2, qid
		) latest ON latest.c2 = ecd.c2 AND latest.qid = ecd.qid AND latest.max_id = ecd.id 
LEFT JOIN (
		SELECT os.EncounterID, os.Description, CASE 
							WHEN os.Description = 'UDS Cervical Cancer Screening' THEN 201 
							WHEN os.Description = 'UDS_Breast_Cancer_Screening' THEN 235 
							WHEN os.Description = 'UDS Childhood BMI' THEN 213 
							WHEN os.Description = 'UDS Adult BMI' THEN 205 
							WHEN os.Description = 'UDS Tobacco Cessation' THEN 232 
							WHEN os.Description = 'UDS Statin_ Therapy' THEN 230 
							WHEN os.Description = 'UDS IVD' THEN 218 
							WHEN os.Description = 'UDS Colorectal Cancer Screening' THEN 208 
							WHEN os.Description = 'UDS HIV Screening' THEN 203 
							WHEN os.Description = 'UDS Depression Screening' THEN 220 
							WHEN os.Description = 'UDS Depression Remission' THEN 223 
							WHEN os.Description = 'UDS Hypertension' THEN 228 
							WHEN os.Description = 'UDS Diabetes' THEN 225 
							WHEN os.Description = 'UDS SUD Initiation' THEN 240 
							WHEN os.Description = 'UDS SUD Engagement' THEN 242 
							END AS qid 
		FROM ORDERSETS os 
		INNER JOIN (
				SELECT MAX(EncounterID) AS EncounterID, Description 
				FROM ORDERSETS 
				WHERE DELETEFLAG = 0 
				GROUP BY Description) maxos ON maxos.EncounterID = os.EncounterID
				) os ON os.qid = ecd.qid 
WHERE ecd.qid IN (201,203,205,208,213,218,220,223,225,228,230,232,235,240,242) AND ecd.cdeid = 2 AND ((ecd.qid = 225 AND ecd.c3 = 1) OR (ecd.qid <> 225 AND ecd.c3 = 0));














    public static final String GET_UDS_SUPPORTING_FACTS_QUERY = "SELECT  \n" +
            "(CASE WHEN C3 = 1 AND ecd.qid = 213 THEN '' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Vitals Not Taken' \n" +
            "WHEN ecd.qid = 213 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Nutrition Counseling Pending' \n" +
            "WHEN ecd.qid = 213 AND (C5 =  '' OR C5 IS NULL) AND (C6 =  '' OR C6 IS NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Nutrition Counseling Done' \n" +
            "WHEN ecd.qid = 213 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 = '' OR C7 IS NULL) THEN 'Physical Activity Done' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 = '' OR C6 IS NULL) AND (C7 = '' OR C7 IS NULL) THEN 'Vitals Not Taken' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 = '' OR C6 IS NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Vitals Not Taken' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 = '' OR C7 IS NULL) THEN 'Vitals Not Taken' \n" +
            "WHEN C3 = 1 AND ecd.qid = 205 THEN '' \n" +
            "WHEN ecd.qid = 205 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Vitals Not Taken' \n" +
            "WHEN ecd.qid = 205 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 = '' OR C6 IS NULL) THEN 'Vitals Not Taken' \n" +
            "WHEN ecd.qid = 205 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Follow Up Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 232 THEN '' \n" +
            "WHEN ecd.qid = 232 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Screening Not Done' \n" +
            "WHEN ecd.qid = 232 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 = '' OR C6 IS NULL) THEN 'Screening Not Done' \n" +
            "WHEN ecd.qid = 232 AND (C5 = '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Follow Up Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 201 THEN '' \n" +
            "WHEN ecd.qid = 201 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Screening Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 235 THEN '' \n" +
            "WHEN ecd.qid = 235 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Screening Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 208 THEN '' \n" +
            "WHEN ecd.qid = 208 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Screening Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 230 THEN '' \n" +
            "WHEN ecd.qid = 230 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Medication Not Prescribed' \n" +
            "WHEN C3 = 1 AND ecd.qid = 218 THEN '' \n" +
            "WHEN ecd.qid = 218 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Medication Not Prescribed' \n" +
            "WHEN C3 = 1 AND ecd.qid = 203 THEN '' \n" +
            "WHEN ecd.qid = 203 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Screening Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 228 THEN '' \n" +
            "WHEN ecd.qid = 228 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Vital Not Taken' \n" +
            "WHEN C3 = 1 AND ecd.qid = 220 THEN '' \n" +
            "WHEN ecd.qid = 220 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 = '' OR C6 IS NULL) THEN 'Screening Not Done' \n" +
            "WHEN ecd.qid = 220 AND (C5 = '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Follow Up Not Done' \n" +
            "WHEN ecd.qid = 220 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Screening Not Done' \n" +
            "WHEN C3 = 1 AND ecd.qid = 223 THEN '' \n" +
            "WHEN ecd.qid = 223 AND (C5 <> '' OR C5 IS NOT NULL) THEN 'Remission Screening Not Done' \n" +
            "WHEN c3= 0 AND ecd.qid  = 225 THEN '' \n" +
            "WHEN c3 = 1 AND ecd.qid = 225 AND c17 > 9 THEN 'HbA1c Value > 9' \n" +
            "WHEN C3 = 1 AND ecd.qid = 225 AND (c17 = '' OR C17 IS NULL) THEN 'No HbA1c Ordered' \n" +
            "WHEN C3 = 1 AND ecd.qid = 240 THEN ''\n" +
            "WHEN ecd.qid = 240 AND C3 = 0 and C27 = 0 THEN 'Treatment Initiation Pending'\n" +
            "WHEN ecd.qid = 240 AND C3 = 0 and C27 > 0 THEN 'Compliance Period Closed: No Further Action Possible'\n" +
            "WHEN C3 = 1 AND ecd.qid = 242 THEN ''\n" +
            "WHEN ecd.qid = 242 AND C3 = 0 AND C27 = 0 AND C26 = 0 THEN 'Patient Engagement Required'\n" +
            "WHEN ecd.qid = 242 AND C3 = 0 AND C27 = 0 AND C26 = 1 THEN 'One More Engagement Required'\n" +
            "WHEN ecd.qid = 242 AND C3 = 0 AND C27 <> 0 THEN 'Compliance Period Closed: No Further Action Possible'\n" +
            "END \n" +
            ") AS 'Supporting_Facts', \n" +
            "(CASE WHEN C3 = 1 AND ecd.qid = 213 THEN '' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> ''OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Nutrition Counseling and Physical Activity Pending' \n" +
            "WHEN ecd.qid = 213 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Physical Activity Pending' \n" +
            "WHEN ecd.qid = 213 AND (C5 =  '' OR C5 IS NULL) AND (C6 =  '' OR C6 IS NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Physical Activity Pending' \n" +
            "WHEN ecd.qid = 213 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 =  '' OR C7 IS NULL) THEN 'Nutrition Counseling Pending' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 =  '' OR C6 IS NULL) AND (C7 =  '' OR C7 IS NULL) THEN 'Nutrition Counseling and Physical Activity Done' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 =  '' OR C6 IS NULL) AND (C7 <> '' OR C7 IS NOT NULL) THEN 'Physical Activity Pending' \n" +
            "WHEN ecd.qid = 213 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND (C7 =  '' OR C7 IS NULL) THEN 'Nutrition Counselling Pending' \n" +
            "WHEN C3 = 1 AND ecd.qid = 205 THEN '' \n" +
            "WHEN ecd.qid = 205 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Follow Up Not Done' \n" +
            "WHEN ecd.qid = 205 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 =  '' OR C6 IS NULL) THEN 'Follow Up Completed ' \n" +
            "WHEN ecd.qid = 205 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND C9 =  0 THEN 'Vitals Taken-Normal Weight' \n" +
            "WHEN ecd.qid = 205 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND C9 =  1 THEN 'Vitals Taken-Under Weight' \n" +
            "WHEN ecd.qid = 205 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND C9 =  2 THEN 'Vitals Taken-Over Weight' \n" +
            "WHEN C3 = 1 AND ecd.qid = 232 THEN '' \n" +
            "WHEN ecd.qid = 232 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Follow Up Not Done' \n" +
            "WHEN ecd.qid = 232 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 =  '' OR C6 IS NULL) THEN 'Follow Up Completed' \n" +
            "WHEN ecd.qid = 232 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) THEN 'Screening Completed' \n" +
            "WHEN c3= 0 AND ecd.qid  = 225 THEN '' \n" +
            "WHEN c3 = 1 AND ecd.qid = 225 AND (C17 <> '' OR C17 IS NOT NULL) THEN C17 \n" +
            "WHEN C3 = 1 AND ecd.qid = 225 AND (C17 = '' OR C17 IS NULL) THEN 'No HbA1c Value' \n" +
            "WHEN ecd.qid = 220 AND C3 =  1  AND C9 = 0 THEN '' \n" +
            "WHEN ecd.qid = 220 AND C3 =  1  AND C9 = 1 THEN '' \n" +
            "WHEN ecd.qid = 220 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 =  '' OR C6 IS NULL) THEN 'Follow Up Completed' \n" +
            "WHEN ecd.qid = 220 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND C9 = 0 THEN 'Screening Completed-Negative' \n" +
            "WHEN ecd.qid = 220 AND (C5 =  '' OR C5 IS NULL) AND (C6 <> '' OR C6 IS NOT NULL) AND C9 = 1 THEN 'Screening Completed-Positive' \n" +
            "WHEN ecd.qid = 220 AND (C5 <> '' OR C5 IS NOT NULL) AND (C6 <> '' AND C6 IS NOT NULL) THEN 'Follow Up Not Done' \n" +
            "END \n" +
            ") AS 'Date',  \n" +
            "(CASE  \n" +
            "WHEN ecd.qid  = 201 THEN 'Cervical Cancer Screening' \n" +
            "WHEN ecd.qid  = 203 THEN 'HIV Screening' \n" +
            "WHEN ecd.qid  = 205 THEN 'Adult BMI' \n" +
            "WHEN ecd.qid  = 208 THEN 'Colorectal Cancer Screening' \n" +
            "WHEN ecd.qid  = 213 THEN 'Childhood BMI' \n" +
            "WHEN ecd.qid  = 218 THEN 'IVD' \n" +
            "WHEN ecd.qid  = 220 THEN 'Depression Screening' \n" +
            "WHEN ecd.qid  = 223 THEN 'Depression Remission' \n" +
            "WHEN ecd.qid  = 225 THEN 'Diabetes' \n" +
            "WHEN ecd.qid  = 228 THEN 'Hypertension' \n" +
            "WHEN ecd.qid  = 230 THEN 'Statin Therapy' \n" +
            "WHEN ecd.qid  = 232 THEN 'Tobacco Screening' \n" +
            "WHEN ecd.qid  = 235 THEN 'Breast Cancer Screening' \n" +
            "WHEN ecd.qid  = 240 THEN 'SUD Initiation' \n" +
            "WHEN ecd.qid  = 242 THEN 'SUD Engagement' \n" +
            "END) AS 'Measure_Name', \n" +
            "p.pid AS 'Patient_id' \n" +
            "FROM ebo_cde_detail ecd \n" +
            "INNER JOIN patients p ON p.pid = ecd.c2 \n" +
            "INNER JOIN (\n" +
            "SELECT C2,qid, MAX(ID) AS max_id\n" +
            "FROM ebo_cde_detail\n" +
            "WHERE qid  IN ( 201,203,205,208,213,218,220,223,225,228,230,232,235,240,242) AND cdeid = 2\n" +
            "GROUP BY C2,qid\n" +
            ") latest ON latest.C2 = ecd.C2 AND Latest.max_id = ecd.id \n" +
            "WHERE ecd.qid IN ( 201,203,205,208,213,218,220,223,225,228,230,232,235,240,242) AND ecd.C2 = ?";
























package analytics.rcp.uds.util;

import analytics.rcp.model.Measure;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import static analytics.rcp.uds.constant.UdsCdeConstants.*;

public class UdsCdeUtil {
    private static final Map<Integer, String> measureNames;

    static {
        measureNames = new HashMap<>();
        measureNames.put(201, "Cervical Cancer Screening");
        measureNames.put(203, "HIV Screening");
        measureNames.put(205, "Adult BMI");
        measureNames.put(208, "Colorectal Cancer Screening");
        measureNames.put(213, "Childhood BMI");
        measureNames.put(218, "IVD");
        measureNames.put(220, "Depression Screening");
        measureNames.put(223, "Depression Remission");
        measureNames.put(225, "Diabetes");
        measureNames.put(228, "Hypertension");
        measureNames.put(230, "Statin Therapy");
        measureNames.put(232, "Tobacco Screening");
        measureNames.put(235, "Breast Cancer Screening");
        measureNames.put(240, "SUD Initiation");
        measureNames.put(242, "SUD Engagement");
    }

    public String getMeasureName(int qid) {
        return measureNames.getOrDefault(qid, "");
    }


//    public String getSupportingFact(int qid, String c3, String c5, String c6, String c7, String c17) {
//        if ("0".equals(c3)) {
//            return handleSupportingFactsC3EqualsZero(qid, c5, c6, c7);
//        } else if ("1".equals(c3) && qid == 225) {
//            return handleSupportingFactsC3EqualsOne(c17);
//        }
//        return "";
//    }

//    public String getSupportingFact(int qid, String c3, String c5, String c6, String c7, String c17, String c26, String c27) {
//        if ("0".equals(c3)) {
//            if (qid == 240) {
//                if ("0".equals(c27)) return "Treatment Initiation Pending";
//                if (isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
//            } else if (qid == 242) {
//                if ("0".equals(c27) && "0".equals(c26)) return "Patient Engagement Required";
//                if ("0".equals(c27) && "1".equals(c26)) return "One More Engagement Required";
//                if (isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
//            } else {
//                return handleSupportingFactsC3EqualsZero(qid, c5, c6, c7);
//            }
//        } else if ("1".equals(c3) && qid == 225) {
//            return handleSupportingFactsC3EqualsOne(c17);
//        }
//
//        return "";
//    }

//    public String getSupportingFact(int qid, String c3, String c5, String c6, String c7, String c17, String c26, String c27) {
//        if ("0".equals(c3)) {
//            switch (qid) {
//                case 240:
//                    return handleSupportingFactForSUDInitiation(c27);
//                case 242:
//                    return handleSupportingFactForSUDEngagement(c26, c27);
//                default:
//                    return handleSupportingFactsC3EqualsZero(qid, c5, c6, c7);
//            }
//        } else if ("1".equals(c3) && qid == 225) {
//            return handleSupportingFactsC3EqualsOne(c17);
//        }
//        return "";
//    }
//
//
//
//    private String handleSupportingFactForSUDInitiation(String c27) {
//        if ("0".equals(c27)) return "Treatment Initiation Pending";
//        if (isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
//        return "";
//    }
//
//    private String handleSupportingFactForSUDEngagement(String c26, String c27) {
//        if ("0".equals(c27) && "0".equals(c26)) return "Patient Engagement Required";
//        if ("0".equals(c27) && "1".equals(c26)) return "One More Engagement Required";
//        if (isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
//        return "";
//    }

    public String getSupportingFact(int qid, Map<String, String> params) {
        if (qid == 240) return handleSupportingFactFor240(params);
        if (qid == 242) return handleSupportingFactFor242(params);
        if ("0".equals(params.get("c3"))) {
            return handleSupportingFactsC3EqualsZero(qid, params.get("c5"), params.get("c6"), params.get("c7"));
        } else if ("1".equals(params.get("c3")) && qid == 225) {
            return handleSupportingFactsC3EqualsOne(params.get("c17"));
        }
        return "";
    }



    private String handleSupportingFactFor240(Map<String, String> params) {
        String c3 = params.get("c3");
        String c27 = params.get("c27");
        if ("1".equals(c3)) return "";
        if ("0".equals(c3) && "0".equals(c27)) return "Treatment Initiation Pending";
        if ("0".equals(c3) && isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
        return null;
    }

    private String handleSupportingFactFor242(Map<String, String> params) {
        String c3 = params.get("c3");
        String c26 = params.get("c26");
        String c27 = params.get("c27");
        if ("1".equals(c3)) return "";
        if ("0".equals(c3) && "0".equals(c27) && "0".equals(c26)) return "Patient Engagement Required";
        if ("0".equals(c3) && "0".equals(c27) && "1".equals(c26)) return "One More Engagement Required";
        if ("0".equals(c3) && isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
        return null;
    }

    private String handleSupportingFactsC3EqualsZero(int qid, String c5, String c6, String c7) {
        Map<Integer, Function<String[], String>> qidHandlers = new HashMap<>();
        qidHandlers.put(213, this::handleChildhoodBMISupportingFacts);
        qidHandlers.put(205, this::handleAdultBMISupportingFacts);
        qidHandlers.put(232, this::handleTobaccoScreeningSupportingFacts);
        qidHandlers.put(201, this::handleSupportingFactsC5EqualsOne);
        qidHandlers.put(235, this::handleSupportingFactsC5EqualsOne);
        qidHandlers.put(208, this::handleSupportingFactsC5EqualsOne);
        qidHandlers.put(230, this::handleSupportingFactsForMedicationNotPrescribed);
        qidHandlers.put(218, this::handleSupportingFactsForMedicationNotPrescribed);
        qidHandlers.put(203, this::handleSupportingFactsC5EqualsOne);
        qidHandlers.put(228, this::handleSupportingFactsForVitalNotTaken);
        qidHandlers.put(220, this::handleSupportingFactsForDepressionScreening);
        qidHandlers.put(223, this::handleSupportingFactsForDepressionRemission);

        Function<String[], String> handler = qidHandlers.get(qid);
        if (handler != null) {
            return handler.apply(new String[]{c5, c6, c7});
        }
        return "";
    }

    private String handleSupportingFactsC3EqualsOne(String c17) {
        if (isEmpty(c17)) return "No HbA1c Ordered";
        int c17Value = Integer.parseInt(c17);
        return c17Value > 9 ? "HbA1c Value > 9" : "";
    }

    private String handleChildhoodBMISupportingFacts(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        String c7 = params[2];
        if (isNotEmpty(c5) && isNotEmpty(c6) && isNotEmpty(c7)) return VITALS_NOT_TAKEN_SUPPORTING_FACT;
        if (isEmpty(c5) && isNotEmpty(c6) && isNotEmpty(c7)) return "Nutrition Counseling Pending";
        if (isEmpty(c5) && isEmpty(c6) && isNotEmpty(c7)) return "Nutrition Counseling Done";
        if (isEmpty(c5) && isNotEmpty(c6) && isEmpty(c7)) return "Physical Activity Done";
        return VITALS_NOT_TAKEN_SUPPORTING_FACT;
    }

    private String handleAdultBMISupportingFacts(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        if (isNotEmpty(c5) && isNotEmpty(c6)) return VITALS_NOT_TAKEN_SUPPORTING_FACT;
        if (isNotEmpty(c5) && isEmpty(c6)) return VITALS_NOT_TAKEN_SUPPORTING_FACT;
        return FOLLOW_UP_NOT_DONE_SUPPORTING_FACTS;
    }

    private String handleTobaccoScreeningSupportingFacts(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        if (isNotEmpty(c5) && isNotEmpty(c6)) return SCREENING_NOT_DONE_SUPPORTING_FACT;
        if (isNotEmpty(c5) && isEmpty(c6)) return SCREENING_NOT_DONE_SUPPORTING_FACT;
        return FOLLOW_UP_NOT_DONE_SUPPORTING_FACTS;
    }

    private String handleSupportingFactsC5EqualsOne(String[] params) {
        String c5 = params[0];
        return isNotEmpty(c5) ? SCREENING_NOT_DONE_SUPPORTING_FACT : "";
    }

    private String handleSupportingFactsForMedicationNotPrescribed(String[] params) {
        String c5 = params[0];
        return isNotEmpty(c5) ? "Medication not Prescribed" : "";
    }

    private String handleSupportingFactsForVitalNotTaken(String[] params) {
        String c5 = params[0];
        return isNotEmpty(c5) ? VITALS_NOT_TAKEN_SUPPORTING_FACT : "";
    }

    private String handleSupportingFactsForDepressionScreening(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        if (isNotEmpty(c5) && isEmpty(c6)) return "Screening not Done";
        if (isEmpty(c5) && isNotEmpty(c6)) return FOLLOW_UP_NOT_DONE_SUPPORTING_FACTS;
        return "Screening not Done";
    }

    private String handleSupportingFactsForDepressionRemission(String[] params) {
        String c5 = params[0];
        return isNotEmpty(c5) ? "Remission Screening Not Done" : "";
    }

    private boolean isNotEmpty(String value) {
        return value != null && !value.trim().isEmpty();
    }

    private boolean isEmpty(String value) {
        return value == null || value.trim().isEmpty();
    }


    public String getDate(int qid, String c3, String c5, String c6, String c7, String c9, String c17) {
        if ("0".equals(c3)) {
            return handleDateC3EqualsZeroForDate(qid, c5, c6, c7, c9);
        } else if ("1".equals(c3) && qid == 225) {
            return handleDateC3EqualsOneForDate(c17);
        }
        return "";
    }

//    public String getDate(int qid, String c3, String c5, String c6, String c7, String c9, String c17, String c26, String c27) {
//        if ("0".equals(c3)) {
//            if (qid == 240) {
//                if ("0".equals(c27)) return "Treatment Initiation Pending";
//                if (isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
//            } else if (qid == 242) {
//                if ("0".equals(c27) && "0".equals(c26)) return "Patient Engagement Required";
//                if ("0".equals(c27) && "1".equals(c26)) return "One More Engagement Required";
//                if (isNotEmpty(c27) && !"0".equals(c27)) return "Compliance Period Closed: No Further Action Possible";
//            } else {
//                return handleDateC3EqualsZeroForDate(qid, c5, c6, c7, c9);
//            }
//        } else if ("1".equals(c3) && qid == 225) {
//            return handleDateC3EqualsOneForDate(c17);
//        }
//
//        return "";
//    }

    private String handleDateC3EqualsZeroForDate(int qid, String c5, String c6, String c7, String c9) {
        Map<Integer, Function<String[], String>> qidHandlers = new HashMap<>();
        qidHandlers.put(213, this::handleDateForChildhoodBMI);
        qidHandlers.put(205, this::handleDateForAdultBMI);
        qidHandlers.put(232, this::handleDateForTobaccoScreening);
        qidHandlers.put(220, this::handleDateForDepressionScreening);

        Function<String[], String> handler = qidHandlers.get(qid);
        if (handler != null) {
            return handler.apply(new String[]{c5, c6, c7, c9});
        }
        return "";
    }

    private String handleDateC3EqualsOneForDate(String c17) {
        if (isNotEmpty(c17)) return c17;
        return "No HbA1c Value";
    }

    private String handleDateForChildhoodBMI(String[] params) {
        String c5 = params[0];
        String  c6 = params[1];
        String c7 = params[2];
        if (isNotEmpty(c5) && isNotEmpty(c6) && isNotEmpty(c7)) return "Nutrition Counseling and Physical Activity Pending";
        if (isEmpty(c5) && isNotEmpty(c6) && isNotEmpty(c7)) return PHYSICAL_ACTIVITY_PENDING_FOR_DATE;
        if (isEmpty(c5) && isEmpty(c6) && isNotEmpty(c7)) return PHYSICAL_ACTIVITY_PENDING_FOR_DATE;
        if (isEmpty(c5) && isNotEmpty(c6) && isEmpty(c7)) return "Nutrition Counseling Pending";
        if (isNotEmpty(c5) && isEmpty(c6) && isEmpty(c7)) return "Nutrition Counseling and Physical Activity Done";
        if (isNotEmpty(c5) && isEmpty(c6) && isNotEmpty(c7)) return PHYSICAL_ACTIVITY_PENDING_FOR_DATE;
        if (isNotEmpty(c5) && isNotEmpty(c6) && isEmpty(c7)) return "Nutrition Counselling Pending";
        return "";
    }

    private String handleDateForAdultBMI(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        String c9 = params[3];
        if (isNotEmpty(c5) && isNotEmpty(c6)) return FOLLOW_UP_NOT_DONE_SUPPORTING_FACTS;
        if (isNotEmpty(c5) && isEmpty(c6)) return FOLLOW_UP_COMPLETED_FOR_DATE;
        if (isEmpty(c5) && isNotEmpty(c6)) {
            switch (c9) {
                case "0": return "Vitals Taken-Normal Weight";
                case "1": return "Vitals Taken-Under Weight";
                case "2": return "Vitals Taken-Over Weight";
                default: return  "";
            }
        }
        return "";
    }

    private String handleDateForTobaccoScreening(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        if (isNotEmpty(c5) && isNotEmpty(c6)) return FOLLOW_UP_NOT_DONE_SUPPORTING_FACTS;
        if (isNotEmpty(c5) && isEmpty(c6)) return FOLLOW_UP_COMPLETED_FOR_DATE;
        if (isEmpty(c5) && isNotEmpty(c6)) return "Screening Completed";
        return "";
    }

    private String handleDateForDepressionScreening(String[] params) {
        String c5 = params[0];
        String c6 = params[1];
        String c9 = params[3];
        if (isNotEmpty(c5) && isEmpty(c6)) return FOLLOW_UP_COMPLETED_FOR_DATE;
        if (isEmpty(c5) && isNotEmpty(c6)) {
            switch (c9) {
                case "0": return "Screening Completed-Negative";
                case "1": return "Screening Completed-Positive";
                default: return "";
            }
        }
        if (isNotEmpty(c5) && isNotEmpty(c6)) return FOLLOW_UP_NOT_DONE_SUPPORTING_FACTS;
        return "";
    }



    public void getComplianceStatus(Measure measure, int qid, String c3) {
        if (qid == 225) {
            measure.setOutcome("1".equals(c3) ? "NOT_ACHIEVED" : "ACHIEVED");
        } else {
            measure.setOutcome("1".equals(c3) ? "ACHIEVED" : "NOT_ACHIEVED");
        }
    }

    public String determineItemName(int qid, String c3, String description) {
        if (qid == 225 && "1".equals(c3)) {
            return "";
        } else if (qid == 225 && "0".equals(c3)) {
            return description;
        }
        return "1".equals(c3) ? "" : description;
    }
}











package analytics.rcp.uds.util


import analytics.rcp.model.Measure
import spock.lang.Unroll
import util.ECWSpec

class UdsCdeUtilSpec extends ECWSpec{

    def udsCdeUtil = new UdsCdeUtil()

    @Unroll
    def "test getSupportingFact with qid=#qid, c3=#c3, c5=#c5, c6=#c6, c7=#c7, c17=#c17"() {
        expect:
        udsCdeUtil.getSupportingFact(qid, c3, c5, c6, c7, c17) == expectedOutput

        where:
        qid | c3  | c5   | c6   | c7   | c17   || expectedOutput
        213 | "0" | null | null | null | null  || "Vitals Not Taken" // handleChildhoodBMISupportingFacts scenario
        205 | "0" | "x"  | null | null | null  || "Vitals Not Taken" // handleAdultBMISupportingFacts scenario
        205 | "0" | null | "x"  | null | null  || "Follow Up Not Done"
        232 | "0" | "x"  | "y"  | null | null  || "Screening Not Done" // handleTobaccoScreeningSupportingFacts
        232 | "0" | "x"  | null | null | null  || "Screening Not Done"
        232 | "0" | null | "x"  | null | null  || "Follow Up Not Done"
        201 | "0" | "x"  | null | null | null  || "Screening Not Done" // handleSupportingFactsC5EqualsOne
        225 | "1" | null | null | null | "10"  || "HbA1c Value > 9" // handleSupportingFactsC3EqualsOne
        225 | "1" | null | null | null | null  || "No HbA1c Ordered" // handleSupportingFactsC3EqualsOne (empty c17)
        230 | "0" | "x"  | null | null | null  || "Medication not Prescribed" // handleSupportingFactsForMedicationNotPrescribed
        220 | "0" | "x"  | null | null | null  || "Screening not Done" // handleSupportingFactsForDepressionScreening
        220 | "0" | null | "x"  | null | null  || "Follow Up Not Done"
        220 | "0" | "x"  | "y"  | null | null  || "Screening not Done"
        223 | "0" | "x"  | null | null | null  || "Remission Screening Not Done" // handleSupportingFactsForDepressionRemission
        228 | "0" | "x"  | null | null | null  || "Vitals Not Taken"
        0   | "0" | null | null | null | null  || "" // no matching qid
        -1  | "-1"| null | null | null | null  || ""
    }


    @Unroll
    def "test getDate with qid=#qid, c3=#c3, c5=#c5, c6=#c6, c7=#c7, c9=#c9, c17=#c17"() {
        expect:
        udsCdeUtil.getDate(qid, c3, c5, c6, c7, c9, c17) == expectedOutput

        where:
        qid | c3  | c5   | c6   | c7   | c9   | c17   || expectedOutput
        213 | "0" | "x"  | "y"  | "z"  | null | null  || "Nutrition Counseling and Physical Activity Pending" // Childhood BMI
        213 | "0" | null | "y"  | "z"  | null | null  || "Physical Activity Pending"
        213 | "0" | "x"  | null | null | null | null  || "Nutrition Counseling and Physical Activity Done"
        213 | "0" | "x"  | null | "y"  | null | null  || "Physical Activity Pending"
        213 | "0" | "x"  | "y"  | null | null | null  || "Nutrition Counselling Pending"
        213 | "0" | null | null | null | null | null  || ""
        205 | "0" | "x"  | "y"  | null | null | null  || "Follow Up Not Done" // Adult BMI
        205 | "0" | "x"  | null | null | null | null  || "Follow Up Completed"
        205 | "0" | null | "y"  | null | "0"  | null  || "Vitals Taken-Normal Weight"
        205 | "0" | null | "y"  | null | "1"  | null  || "Vitals Taken-Under Weight"
        205 | "0" | null | "x"  | null | "2"  | null  || "Vitals Taken-Over Weight"
        205 | "0" | null | "x"  | null | "-1" | null  || ""
        205 | "0" | null | null | null | null | null  || ""
        232 | "0" | "x"  | "y"  | null | null | null  || "Follow Up Not Done" // Tobacco Screening
        232 | "0" | "x"  | null | null | null | null  || "Follow Up Completed"
        232 | "0" | null | "y"  | null | null | null  || "Screening Completed"
        232 | "0" | null | null | null | null | null  || ""
        220 | "0" | "x"  | null | null | null | null  || "Follow Up Completed" // Depression Screening
        220 | "0" | null | "y"  | null | "0"  | null  || "Screening Completed-Negative"
        220 | "0" | null | "y"  | null | "1"  | null  || "Screening Completed-Positive"
        220 | "0" | "x"  | "y"  | null | null | null  || "Follow Up Not Done"
        220 | "0" | null | "x"  | null | "-1" | null  || ""
        220 | "0" | null | null | null | null | null  || ""
        225 | "1" | null | null | null | null | "2023" || "2023" // HbA1c Date (C3 = 1)
        225 | "1" | null | null | null | null | null  || "No HbA1c Value" // HbA1c Date (empty c17)
        0   | "0" | null | null | null | null | null  || "" // No handler
        -1  | "-1"| null | null | null | null | null  || ""
    }




    @Unroll
    def "test getComplianceStatus with qid=#qid and c3=#c3"() {
        given: "A Measure object"
        def measure = new Measure()

        when: "getComplianceStatus is called"
        udsCdeUtil.getComplianceStatus(measure, qid, c3)

        then: "The outcome is correctly set in the Measure object"
        measure.getOutcome() == expectedOutcome

        where:
        qid  | c3     || expectedOutcome
        225  | "1"    || "NOT_ACHIEVED" // Special handling for qid 225
        225  | "0"    || "ACHIEVED"     // Special handling for qid 225
        100  | "1"    || "ACHIEVED"     // General case (qid != 225)
        100  | "0"    || "NOT_ACHIEVED" // General case (qid != 225)
        300  | "1"    || "ACHIEVED"     // General case (qid != 225)
        300  | "0"    || "NOT_ACHIEVED" // General case (qid != 225)
    }

    @Unroll
    def "test determineItemName with qid=#qid, c3=#c3, description=#description"() {
        when: "determineItemName is called"
        def result = udsCdeUtil.determineItemName(qid, c3, description)

        then: "The result matches the expected value"
        result == expected

        where:
        qid  | c3     | description         || expected
        225  | "1"    | "Test Description"  || ""          // qid = 225, c3 = 1
        225  | "0"    | "Test Description"  || "Test Description" // qid = 225, c3 = 0
        100  | "1"    | "Another Description" || ""          // qid != 225, c3 = 1
        100  | "0"    | "Another Description" || "Another Description" // qid != 225, c3 = 0
        300  | "1"    | "Sample"            || ""          // qid != 225, c3 = 1
        300  | "0"    | "Sample"            || "Sample"    // qid != 225, c3 = 0
    }


    @Unroll
    def "test getMeasureName with qid=#qid"() {
        when: "getMeasureName is called"
        def result = udsCdeUtil.getMeasureName(qid)

        then: "The result matches the expected measure name"
        result == expected

        where:
        qid  || expected
        201  || "Cervical Cancer Screening"  // Valid qid in the map
        203  || "HIV Screening"             // Valid qid in the map
        205  || "Adult BMI"                 // Valid qid in the map
        208  || "Colorectal Cancer Screening" // Valid qid in the map
        213  || "Childhood BMI"             // Valid qid in the map
        218  || "IVD"                       // Valid qid in the map
        220  || "Depression Screening"      // Valid qid in the map
        223  || "Depression Remission"      // Valid qid in the map
        225  || "Diabetes"                  // Valid qid in the map
        228  || "Hypertension"              // Valid qid in the map
        230  || "Statin Therapy"            // Valid qid in the map
        232  || "Tobacco Screening"         // Valid qid in the map
        235  || "Breast Cancer Screening"   // Valid qid in the map
        999  || ""                          // Invalid qid, should return default empty string
        -1   || ""                          // Invalid qid, should return default empty string
        0    || ""                          // Invalid qid, should return default empty string
    }
}




import spock.lang.Specification
import analytics.rcp.model.Measure

class UdsCdeUtilSpec extends Specification {

    def udsCdeUtil = new UdsCdeUtil()

    def "should return correct measure name"() {
        expect:
        udsCdeUtil.getMeasureName(qid) == expectedName

        where:
        qid | expectedName
        201 | "Cervical Cancer Screening"
        225 | "Diabetes"
        999 | "" // unknown qid
    }

    def "should return supporting fact for qid 240"() {
        given:
        Map<String, String> params = ["c3": c3, "c27": c27]

        expect:
        udsCdeUtil.getSupportingFact(240, params) == expected

        where:
        c3 | c27 | expected
        "1" | "any" | ""
        "0" | "0" | "Treatment Initiation Pending"
        "0" | "1" | "Compliance Period Closed: No Further Action Possible"
    }

    def "should return date based on qid 205 and c3 = 0"() {
        given:
        def result = udsCdeUtil.getDate(205, "0", c5, c6, "", c9, "")

        expect:
        result == expected

        where:
        c5     | c6     | c9  | expected
        "x"    | "y"    | ""  | "Follow-up Not Done"
        "x"    | ""     | ""  | "Follow-up Completed"
        ""     | "y"    | "0" | "Vitals Taken-Normal Weight"
        ""     | "y"    | "1" | "Vitals Taken-Under Weight"
        ""     | "y"    | "2" | "Vitals Taken-Over Weight"
    }

    def "should set compliance status correctly for qid 225"() {
        given:
        def measure = new Measure()

        when:
        udsCdeUtil.getComplianceStatus(measure, qid, c3)

        then:
        measure.outcome == expected

        where:
        qid | c3  | expected
        225 | "1" | "NOT_ACHIEVED"
        225 | "0" | "ACHIEVED"
        201 | "1" | "ACHIEVED"
        201 | "0" | "NOT_ACHIEVED"
    }

    def "should determine item name correctly"() {
        expect:
        udsCdeUtil.determineItemName(qid, c3, description) == expected

        where:
        qid | c3  | description      | expected
        225 | "1" | "Diabetes Check" | ""
        225 | "0" | "Diabetes Check" | "Diabetes Check"
        203 | "1" | "HIV Test"       | ""
        203 | "0" | "HIV Test"       | "HIV Test"
    }
}


















import spock.lang.Specification
import analytics.rcp.model.Measure

class UdsCdeUtilSpec extends Specification {

    def udsCdeUtil = new UdsCdeUtil()

    def "getMeasureName should return correct name or empty string"() {
        expect:
        udsCdeUtil.getMeasureName(qid) == expected

        where:
        qid | expected
        201 | "Cervical Cancer Screening"
        225 | "Diabetes"
        999 | ""
    }

    def "getSupportingFact for qid 240"() {
        expect:
        udsCdeUtil.getSupportingFact(240, ["c3": c3, "c27": c27]) == expected

        where:
        c3   | c27   | expected
        "1"  | "0"   | ""
        "0"  | "0"   | "Treatment Initiation Pending"
        "0"  | "1"   | "Compliance Period Closed: No Further Action Possible"
        "0"  | "xyz" | "Compliance Period Closed: No Further Action Possible"
    }

    def "getSupportingFact for qid 242"() {
        expect:
        udsCdeUtil.getSupportingFact(242, ["c3": c3, "c26": c26, "c27": c27]) == expected

        where:
        c3   | c26  | c27  | expected
        "1"  | "0"  | "0"  | ""
        "0"  | "0"  | "0"  | "Patient Engagement Required"
        "0"  | "1"  | "0"  | "One More Engagement Required"
        "0"  | "1"  | "2"  | "Compliance Period Closed: No Further Action Possible"
    }

    def "getSupportingFact when c3 = 0 for multiple qids"() {
        expect:
        udsCdeUtil.getSupportingFact(qid, ["c3": "0", "c5": c5, "c6": c6, "c7": c7]) == expected

        where:
        qid  | c5     | c6     | c7     | expected
        213 | "x"    | "y"    | "z"    | "Vitals Not Taken"
        213 | null   | "y"    | "z"    | "Nutrition Counseling Pending"
        213 | null   | null   | "z"    | "Nutrition Counseling Done"
        213 | null   | "y"    | null   | "Physical Activity Done"
        205 | "x"    | null   | null   | "Vitals Not Taken"
        205 | null   | null   | null   | "Follow-up Not Done"
        232 | "x"    | null   | null   | "Screening Not Done"
        201 | "x"    | null   | null   | "Screening Not Done"
        230 | "x"    | null   | null   | "Medication not Prescribed"
        228 | "x"    | null   | null   | "Vitals Not Taken"
        220 | "x"    | null   | null   | "Screening not Done"
        223 | "x"    | null   | null   | "Remission Screening Not Done"
    }

    def "getSupportingFact when c3 = 1 and qid = 225"() {
        expect:
        udsCdeUtil.getSupportingFact(225, ["c3": "1", "c17": c17]) == expected

        where:
        c17  | expected
        null | "No HbA1c Ordered"
        ""   | "No HbA1c Ordered"
        "10" | "HbA1c Value > 9"
        "8"  | ""
    }

    def "getDate when c3 = 0 and qid = 213 (Childhood BMI)"() {
        expect:
        udsCdeUtil.getDate(213, "0", c5, c6, c7, "", "") == expected

        where:
        c5   | c6   | c7   | expected
        "x" | "y" | "z" | "Nutrition Counseling and Physical Activity Pending"
        null | "y" | "z" | "Physical Activity Pending"
        null | null | "z" | "Physical Activity Pending"
        null | "y" | null | "Nutrition Counseling Pending"
        "x" | null | null | "Nutrition Counseling and Physical Activity Done"
        "x" | null | "z" | "Physical Activity Pending"
        "x" | "y" | null | "Nutrition Counselling Pending"
    }

    def "getDate when c3 = 1 and qid = 225"() {
        expect:
        udsCdeUtil.getDate(225, "1", "", "", "", "", c17) == expected

        where:
        c17  | expected
        "10" | "10"
        null | "No HbA1c Value"
        ""   | "No HbA1c Value"
    }

    def "getComplianceStatus sets correct outcome"() {
        given:
        def measure = new Measure()

        when:
        udsCdeUtil.getComplianceStatus(measure, qid, c3)

        then:
        measure.outcome == expected

        where:
        qid | c3  | expected
        225 | "1" | "NOT_ACHIEVED"
        225 | "0" | "ACHIEVED"
        201 | "1" | "ACHIEVED"
        201 | "0" | "NOT_ACHIEVED"
    }

    def "determineItemName returns correct value"() {
        expect:
        udsCdeUtil.determineItemName(qid, c3, description) == expected

        where:
        qid | c3  | description | expected
        225 | "1" | "desc"      | ""
        225 | "0" | "desc"      | "desc"
        203 | "1" | "desc"      | ""
        203 | "0" | "desc"      | "desc"
    }
} 
